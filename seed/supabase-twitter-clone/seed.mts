import { createSeedClient, type profilesScalars } from '@snaplet/seed';
import { createClient } from '@supabase/supabase-js'
import {Database} from './lib/database.types'

// You can use @snaplet/copycat to generate fake data for a field, for example:
// ```
// await seed.users([{ email: ({ seed }) => copycat.email(seed) }])
// ```
// More on this in our docs: https://docs.snaplet.dev/core-concepts/seed#inside-the-snapletseed-workflow
import { copycat, faker } from '@snaplet/copycat'


const seed = await createSeedClient({
  dryRun: process.env.DRY !== '0',
  models: {
    profiles: {
      data: {
        avatarUrl: ({ seed }) => faker.image.avatarGitHub(),
      }
    }
  }
});

// This is a basic example generated by Snaplet to start you off, check out the docs for where to go from here
// * For more on getting started with @snaplet/seed: https://docs.snaplet.dev/getting-started/quick-start/seed
// * For a more detailed reference: https://docs.snaplet.dev/core-concepts/seed

const supabase = createClient<Database>(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
)



// Clears all existing data in the database, but keep the structure
await seed.$resetDatabase()

const PASSWORD = "testuser";
for (let i = 0; i < 5; i += 1) {
  const email = copycat.email(i).toLowerCase();
  const avatar: string = faker.image.avatarGitHub();
  const fullName: string = copycat.fullName(i);
  const userName: string = copycat.username(i);
  await supabase.auth.signUp({
      email,
      password: PASSWORD,
      options: {
      data: {
        avatar_url: avatar,
        name: fullName,
        user_name: userName,
      }
    }
  });
}
// In our app, all our data under public isn't directly linked under the auth.user table but rather under the public.profiles table
// And for any user inserted in the auth.users table we have a trigger that will insert a row in the public.profiles table
// Since `supabase.auth.signUp` create a user, we should now have all the profiles created as well
const {data: databaseProfiles} = await supabase.from("profiles").select()
//  We convert our database fields to something that our seed client can understand
const profiles: profilesScalars[] = databaseProfiles?.map(profile => ({
  avatarUrl: profile.avatar_url,
  id: profile.id,
  name: profile.name,
  username: profile.username,
})) ?? []

// We can now use our seed client to insert tweets that will be linked to the profiles
await seed.tweets(x => x(10), {connect: { profiles }})
console.log('Profiles created: ', profiles)