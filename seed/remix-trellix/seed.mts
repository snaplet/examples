import { createSeedClient } from '@snaplet/seed';

// You can use @snaplet/copycat to generate fake data for a field, for example:
// ```
// await seed.users([{ email: ({ seed }) => copycat.email(seed) }])
// ```
// More on this in our docs: https://docs.snaplet.dev/core-concepts/seed#inside-the-snapletseed-workflow
import { copycat } from '@snaplet/copycat'

// This is a basic example generated by Snaplet to start you off, check out the docs for where to go from here
// * For more on getting started with @snaplet/seed: https://docs.snaplet.dev/getting-started/quick-start/seed
// * For a more detailed reference: https://docs.snaplet.dev/core-concepts/seed


const seed = await createSeedClient({
  dryRun: process.env.DRY !== '0',
});

// Clears all existing data in the database, but keep the structure
await seed.$resetDatabase()


// This will create 3 records in the accounts table
// it reads accounts times(x) 3
const store = await seed.accounts([{

  email: 'peter@example.org',
  passwords: [
    // Password is secret.
    {
      salt: '6f032f4972e526fe3c663906055ec429',
      hash: 'ef5473c56ed0986791440b7b76000646819007d4db0caee9ed63c9602b79ce50f37f0f3b3bcbdbd063bca8e17f947f2b58e28ca9194829d43e75d675a0801c49'
    },  
  ],
  boards: [
    {
      columns: [
        {

          items: [
            {}
          ]
        },
      ]
    }
  ]
}])

// JSON.stringify(console.log(store.columns[0]), undefined, 2)

// JSON.stringify(console.log(store.items), undefined, 2)

// Run it with: DRY=0 npx tsx seed.mts
